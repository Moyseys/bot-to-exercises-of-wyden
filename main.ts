import dotenv from "dotenv";
import { Question } from "./types";
import { Api } from "./Api";
import { sendToOllama } from "./ollamaClient";
dotenv.config();

function scrapper(questions: Question[]): string {
  let formated = "";

  for (let i = 0; i < questions.length; i++) {
    const question = questions[i];
    formated += `${i + 1} > ${question.description}\n`;
    const as = ["A", "B", "C", "D", "E"];

    for (let j = 0; j < question.alternatives.length; j++) {
      formated += `${as[j]} > ${question.alternatives[j].description}\n`;
    }
    formated += `\n`;
  }

  return formated;
}

async function main(): Promise<void> {
  const api = new Api();
  const theme = process.env.PRACTICES_THEME;
  if (!theme) {
    console.log("‚ùå Erro: PRACTICES_THEME n√£o est√° definido no .env");
    process.exit(1);
  }

  console.log("üöÄ Iniciando pr√°tica...");

  // Iniciar practice
  const practiceResponse = await api.practices(theme);
  const practiceData: any = await practiceResponse.json();
  const practiceId: string = practiceData.data.id;

  console.log(`‚úÖ Pr√°tica iniciada com ID: ${practiceId}`);

  // Pegar quest√µes
  console.log("üìö Buscando quest√µes...");
  const practiceDetails = await api.getPractice(practiceId);
  const questions = practiceDetails.data.questions;

  console.log(`‚úÖ ${questions.length} quest√µes encontradas`);

  // Descobrir respostas
  console.log("ü§ñ Descobrindo respostas com Ollama...");
  const formattedQuestions = scrapper(questions);

  const prompt = `Voc√™ DEVE responder APENAS no formato especificado, sem explica√ß√µes adicionais.

Para cada quest√£o abaixo, responda SOMENTE com o n√∫mero da quest√£o seguido de dois pontos e a letra da alternativa correta.
Formato OBRIGAT√ìRIO: 1:A 2:B 3:C 4:D 5:E (cada resposta separada por espa√ßo)

N√ÉO adicione explica√ß√µes, N√ÉO use frases completas, APENAS o formato "n√∫mero:letra".

Quest√µes:
${formattedQuestions}

Resposta (apenas no formato n√∫mero:letra):`;

  const ollamaResponse = await sendToOllama(prompt);

  if (!ollamaResponse) {
    throw new Error("N√£o foi poss√≠vel obter respostas do Ollama");
  }

  console.log("ü§ñ Resposta do Ollama:", ollamaResponse);

  // Aceita "1:A", "1: A", "1.A", "1. A" (com dois pontos ou ponto, com ou sem espa√ßo)
  let answers: string[] | null = ollamaResponse.match(/(\d+)[:.]\s*([A-E])/g);

  if (!answers || answers.length === 0) {
    console.error("‚ùå Formato da resposta do Ollama n√£o reconhecido.");
    console.error("Por favor, tente novamente ou ajuste o modelo.");
    throw new Error("N√£o foi poss√≠vel parsear as respostas do Ollama");
  }

  // Marcar respostas
  console.log("‚úçÔ∏è  Marcando respostas...");
  const letterToIndex: { [key: string]: number } = {
    A: 0,
    B: 1,
    C: 2,
    D: 3,
    E: 4,
  };

  for (const answer of answers) {
    const [questionNum, letter] = answer.replace(/\s+/g, "").split(/[:.]/);
    const questionIndex = parseInt(questionNum) - 1;

    if (questionIndex >= 0 && questionIndex < questions.length) {
      const question = questions[questionIndex];
      const alternativeIndex = letterToIndex[letter];

      if (
        alternativeIndex !== undefined &&
        question.alternatives[alternativeIndex]
      ) {
        const alternativeId = question.alternatives[alternativeIndex].id;

        await api.selectAlternative(practiceId, question.id, alternativeId);
        console.log(
          `  ‚úì Quest√£o ${questionNum}: Alternativa ${letter} marcada`
        );
      }
    }
  }

  console.log("‚úÖ Todas as respostas foram marcadas!");

  // Finalizar pr√°tica
  console.log("üèÅ Finalizando pr√°tica...");
  console.log("‚úÖ Pr√°tica finalizada com sucesso!");
}

main().catch((err) => {
  console.error("‚ùå Erro no fluxo principal:", err);
  process.exit(1);
});
